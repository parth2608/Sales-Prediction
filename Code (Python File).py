# -*- coding: utf-8 -*-
"""Black_Friday_Sales_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FkgYeQwJntGBnxGcUnoQ00Px9Hqu9W9N

#Library Imports and Installations
"""

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder, RobustScaler
from sklearn.model_selection import train_test_split
from sklearn import linear_model
from sklearn.metrics import mean_squared_error
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from xgboost.sklearn import XGBRegressor

!pip install matplotlib==3.1.3 &> /dev/null

"""#Retrieving Data"""

from google.colab import drive
drive.mount('/content/drive')

train = pd.read_csv("drive/MyDrive/train.csv")
print("Shape of train set: ", train.shape)

"""#Understanding Data"""

train.info()

train.head()

"""#Missing Values"""

def missing_val(df):
    missing_values=df.isnull().sum()
    missing_percentage=missing_values*100/len(df['User_ID'])
    missing_percentage=missing_percentage.sort_values(ascending=False)
    return missing_percentage

missing_val(train)

"""#Exploratory Data Analysis"""

train.groupby('User_ID')['Product_ID'].nunique()

plt.figure(figsize=(20, 10))
ax = sns.countplot(x=train['Gender'], order=train['Gender'].value_counts(ascending=False).index)
val = train["Gender"].value_counts(ascending=False).values
plt.title("Gender Count")
plt.xlabel("Gender")
plt.ylabel("Count")
plt.show()

"""There are more Male purchasers as comapred to Female purchasers."""

plt.figure(figsize=(20,10))
ax = sns.countplot(train['Age'], order=train['Age'].value_counts(ascending=False).index)
val = train["Age"].value_counts(ascending=False).values
plt.title("Age Range Count")
plt.xlabel("Age Range")
plt.ylabel("Count")
plt.show()

"""Most purchasers belong to the age-group 26-35."""

plt.figure(figsize=(20, 10))
ax = sns.countplot(train['Occupation'], order=train['Occupation'].value_counts(ascending=False).index)
val = train["Occupation"].value_counts(ascending=False).values
plt.title("Occupation Count")
plt.xlabel("Occupation")
plt.ylabel("Count")
plt.show()

"""Most purchasers have occupation 4."""

plt.figure(figsize=(20, 10))
ax = sns.countplot(train['City_Category'], order=train['City_Category'].value_counts(ascending=False).index)
val = train["City_Category"].value_counts(ascending=False).values
plt.title("City Category Count")
plt.xlabel("City Categories")
plt.ylabel("Count")
plt.show()

"""Most purchasers belong to City B."""

plt.figure(figsize=(20, 10))
ax = sns.countplot(train['Stay_In_Current_City_Years'], order=train['Stay_In_Current_City_Years'].value_counts(ascending=False).index)
val = train['Stay_In_Current_City_Years'].value_counts(ascending=False).values
plt.title("Stay in City Count")
plt.xlabel("Stay in City Years")
plt.ylabel("Count")
plt.show()

"""Most purchasers are new comers to the city, as a result of which they may need to buy products."""

plt.figure(figsize=(20, 10))
ax = sns.countplot(train['Marital_Status'], order=train['Marital_Status'].value_counts(ascending=False).index)
val = train['Marital_Status'].value_counts(ascending=False).values
plt.title("Marital Count")
plt.xlabel("Marital Status")
plt.ylabel("Count")
plt.show()

"""Most purchasers belong to marital status 0."""

plt.figure(figsize=(20, 10))
ax = sns.countplot(train['Product_Category_1'], order=train['Product_Category_1'].value_counts(ascending=False).index)
val = train['Product_Category_1'].value_counts(ascending=False).values
plt.title("Product Category 1 Count")
plt.xlabel("Product Category 1")
plt.ylabel("Count")
plt.show()

plt.figure(figsize=(20, 10))
ax = sns.countplot(train['Product_Category_2'], order=train['Product_Category_2'].value_counts(ascending=False).index)
val = train['Product_Category_2'].value_counts(ascending=False).values
plt.title("Product Category 2 Count")
plt.xlabel("Product Category 2")
plt.ylabel("Count")
plt.show()

plt.figure(figsize=(20, 10))
ax = sns.countplot(train['Product_Category_3'], order=train['Product_Category_3'].value_counts(ascending=False).index)
val = train['Product_Category_3'].value_counts(ascending=False).values
plt.title("Product Category 3 Count")
plt.xlabel("Product Category 3")
plt.ylabel("Count")
plt.show()

"""##Product_Category vs Purchase Amount"""

plt.figure(figsize=(20,10))
sns.boxplot(train['Product_Category_1'],train['Purchase'])
plt.show()

plt.figure(figsize=(20,10))
sns.boxplot(train['Product_Category_2'],train['Purchase'])
plt.show()

plt.figure(figsize=(20,10))
sns.boxplot(train['Product_Category_3'],train['Purchase'])
plt.show()

"""##Age vs Purchase Amount"""

plt.figure(figsize=(20,10))
sns.boxplot(train['Age'],train['Purchase'])
plt.show()

"""Customer's age has low impact on their purchasing power.

##City Category vs Purchase Amount
"""

plt.figure(figsize=(20,10))
sns.boxplot(train['City_Category'],train['Purchase'])
plt.show()

"""Purchasing power of customers from C category city is the highest, followeed by B and A.

##Stay In Current City Years vs Purchase Amount
"""

plt.figure(figsize=(20,10))
sns.boxplot(train['Stay_In_Current_City_Years'],train['Purchase'])
plt.show()

"""The number of years the customers reside in the current city has low impact on their purchasing power.

##Purchasing Patern
"""

plt.figure(figsize=(20,10))
sns.distplot(train['Purchase'])
plt.show()

"""The purchase variable seems to be normally distributed.

##Pattern of Purchased Products
"""

plt.figure(figsize=(15,8))
sns.distplot(train['Product_ID'].value_counts())
plt.show()

"""There are around 500 products that are purchased many times whereas rest of the products are rarely purchased.

#Handling Missing Values

###For train-set
"""

train.isnull().sum()

train["Product_Category_2"] = train["Product_Category_2"].fillna(value=8)
train["Product_Category_3"] = train["Product_Category_3"].fillna(value=16)

# train["Product_Category_2"] = train["Product_Category_2"].fillna(value=0)
# train["Product_Category_3"] = train["Product_Category_3"].fillna(value=0)

# train["Product_Category_2"] = train["Product_Category_2"].fillna(value=9)
# train["Product_Category_3"] = train["Product_Category_3"].fillna(value=14)

train.isnull().sum()

"""## Label Encoding

"""

def label_encoding(df):
    df['Age'] = df['Age'].replace('0-17', 17)
    df['Age'] = df['Age'].replace('18-25', 25)
    df['Age'] = df['Age'].replace('26-35', 35)
    df['Age'] = df['Age'].replace('36-45', 45)
    df['Age'] = df['Age'].replace('46-50', 50)
    df['Age'] = df['Age'].replace('51-55', 55)
    df['Age'] = df['Age'].replace('55+', 60)
    df['Gender'] = df['Gender'].replace('M', 0)
    df['Gender'] = df['Gender'].replace('F', 1)
    df['City_Category'] = df['City_Category'].replace('A', 0)
    df['City_Category'] = df['City_Category'].replace('B', 1)
    df['City_Category'] = df['City_Category'].replace('C', 2)
    df['Stay_In_Current_City_Years'] = df['Stay_In_Current_City_Years'].replace('4+', 4)
    return df


train = label_encoding(train)

train['Stay_In_Current_City_Years'] = train['Stay_In_Current_City_Years'].astype(int)

train['Product_Category_2'] = train['Product_Category_2'].astype(int)
train['Product_Category_3'] = train['Product_Category_3'].astype(int)

train.head()

train['User_ID'] = train['User_ID'] - 1000000

train.Product_ID = train.Product_ID.str.replace('P00', '')

train.head()

avg_purchase_per_product=pd.DataFrame(train.groupby(['Product_ID'])['Purchase'].mean())
avg_purchase_per_product.reset_index(inplace=True)
avg_purchase_per_user=pd.DataFrame(train.groupby(['User_ID'])['Purchase'].mean())
avg_purchase_per_user.reset_index(inplace=True)

def create_var(data):
    data['avg_purchase_per_product']=data['Product_ID'].map(avg_purchase_per_product.set_index('Product_ID')['Purchase'])
    data['avg_purchase_per_user']=data['User_ID'].map(avg_purchase_per_user.set_index('User_ID')['Purchase'])
    return data
 
train=create_var(train)
train.head()

plt.style.use('ggplot')
pd.set_option("display.precision", 5)
num_col = ['Age', 'Occupation', 'Stay_In_Current_City_Years', 'Product_Category_1', 'Product_Category_2', 'Product_Category_3']

def plotDistribGraph(pdf):
    fig, a = plt.subplots(ncols=1, figsize=(16, 5))
    a.set_title("Distributions")
    for col in num_col:
        sns.kdeplot(pdf[col], ax=a)
    plt.legend(num_col)
    plt.xlabel('Values')
    plt.show()


plotDistribGraph(train)

def plotGraph(pdf, pscaled_df):
    fig, (a, b) = plt.subplots(ncols=2, figsize=(16, 5))
    a.set_title("Before scaling")
    for col in pdf.columns:
        sns.kdeplot(pdf[col], ax=a)
    a.legend(num_col)
    b.set_title("After scaling")
    for col in pdf.columns:
        sns.kdeplot(pscaled_df[col], ax=b)
    b.legend(num_col)
    plt.xlabel('Scaled_value')
    plt.show()

scaler = StandardScaler()

for col in num_col:
    train[col] = scaler.fit_transform(train[col].values.reshape(-1,1))
    test[col] = scaler.transform(test[col].values.reshape(-1,1))
plotDistribGraph(train)

train['Product_ID'] = scaler.fit_transform(train['Product_ID'].values.reshape(-1,1))

train.head()

corr=train.corr()
plt.figure(figsize=(20,12))
sns.heatmap(corr,annot=True)
plt.show()

gender_p=train.groupby(['Gender'])['Purchase'].mean()
print(gender_p)

"""Males are willing to spend more than females."""

age_p=train.groupby(['Age'])['Purchase'].mean()
print(age_p)

"""Purchasers belonging to age-group 0-17 spend the least whereas those belonging to age group 50-55 spend the most. But, there is low disparity in the spending patterns among all the age-groups."""

occupation_p=train.groupby(['Occupation'])['Purchase'].mean()
print(occupation_p)

"""Occupation has low impact on the purchasing habit of the customers."""

city_cat_p=train.groupby(['City_Category'])['Purchase'].mean()
print(city_cat_p)

"""C city-category customers spend more, followed by B and A."""

marital_p=train.groupby(['Marital_Status'])['Purchase'].mean()
print(marital_p)

"""The marital status of customers as negligible impact on the purchasing pattern of customers."""

years_p=train.groupby(['Stay_In_Current_City_Years'])['Purchase'].mean()
print(years_p)

"""The number of years that the customers reside in the current city has low impact on the purchasing pattern of the customers.

#Modelling
"""

y = train[['Purchase']]
x = train.drop(['Purchase'], axis=1)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42, shuffle=True)

"""##Linear Regression"""

reg = linear_model.LinearRegression()
lm_model = reg.fit(x_train, y_train)
pred = lm_model.predict(x_test)

np.sqrt(mean_squared_error(y_test, pred))

r2_score(y_test, pred)

"""##Random Forest"""

RF_reg = RandomForestRegressor()
RF_model = RF_reg.fit(x_train,y_train)
pred = RF_model.predict(x_test)
np.sqrt(mean_squared_error(y_test,pred))

r2_score(y_test, pred)

"""##XGBoost"""

xgb = XGBRegressor(n_estimators=500,learning_rate=0.1,gamma=0,min_child_weight=10,
                           subsample=0.8,colsample_bytree=1,max_depth=7)
XGB_model = xgb.fit(x_train,y_train)
pred = XGB_model.predict(x_test)
np.sqrt(mean_squared_error(y_test,pred))

r2_score(y_test, pred)